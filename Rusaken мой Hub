local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local OrionLib = loadstring(game:HttpGet('https://raw.githubusercontent.com/jensonhirst/Orion/main/source'))()

-- Создаем окно GUI
local Window = OrionLib:MakeWindow({
    Name = "Rusaken GUI",
    HidePremium = false, 
    SaveConfig = false, 
    ConfigFolder = "OrionTest",
    IntroEnabled = false
})

local Tab = Window:MakeTab({
    Name = "Teleport",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Создаём папку и платформу
local teleportFolder = Instance.new("Folder", workspace)
teleportFolder.Name = "TeleportSystem"

local teleportPart = Instance.new("Part", teleportFolder)
teleportPart.Size = Vector3.new(10, 1, 10)
teleportPart.Anchored = true
teleportPart.CanCollide = true
teleportPart.Transparency = 0.5
teleportPart.Color = Color3.fromRGB(0, 170, 255)
teleportPart.Name = "TeleportPlatform"

-- Переменные для состояний
local targetPlayer = nil
local playerAutoTeleport = false
local teleportConnections = {}
local currentTweens = {}
local speedEnabled = false
local currentSpeed = 16  -- Стандартная скорость
local autoFixEnabled = false
local autoFixConnection = nil

-- Функция для фикса генератора
local function fixfullgen()
    workspace.Map.Ingame.Map.Generator.Remotes.RE:FireServer()
    workspace.Map.Ingame.Map.Generator.Remotes.RE:FireServer()
    workspace.Map.Ingame.Map.Generator.Remotes.RE:FireServer()
    workspace.Map.Ingame.Map.Generator.Remotes.RE:FireServer()
end

-- Функция для проверки наличия PuzzleUI
local function hasPuzzleUI()
    local playerGui = LocalPlayer:FindFirstChild("PlayerGui")
    if playerGui then
        return playerGui:FindFirstChild("PuzzleUI") and playerGui.PuzzleUI:FindFirstChild("Container")
    end
    return false
end

-- Функция для установки скорости
local function SetPlayerSpeed()
    if not LocalPlayer.Character then return end
    
    local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        if speedEnabled then
            humanoid:SetAttribute("BaseSpeed", currentSpeed)
            humanoid.WalkSpeed = currentSpeed
        else
            humanoid:SetAttribute("BaseSpeed", nil)
            humanoid.WalkSpeed = 16
        end
    end
end

-- Обновляем позицию платформы
function UpdateTeleportPartPosition()
    if not LocalPlayer.Character then return end
    
    local humanoidRoot = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if humanoidRoot then
        teleportPart.CFrame = humanoidRoot.CFrame + Vector3.new(0, 50, 0)
    end
end

-- Телепортация к платформе (по кнопке)
function TeleportToPlatform()
    if not LocalPlayer.Character then return end
    
    local humanoidRoot = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if humanoidRoot and teleportPart then
        if currentTweens.platform then
            currentTweens.platform:Cancel()
        end
        
        local targetCFrame = teleportPart.CFrame + Vector3.new(0, 5, 0)
        local tweenInfo = TweenInfo.new(0.000000000000001, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        
        currentTweens.platform = TweenService:Create(humanoidRoot, tweenInfo, {CFrame = targetCFrame})
        currentTweens.platform:Play()
    end
end

-- Телепортация к игроку (автоматическая)
function SmoothTeleportToPlayer()
    if not targetPlayer or not targetPlayer.Character then return end
    
    local targetRoot = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    local localRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    
    if targetRoot and localRoot then
        if currentTweens.player then
            currentTweens.player:Cancel()
        end
        
        local teleportCFrame = targetRoot.CFrame * CFrame.new(0, 0.5, 2)
        local tweenInfo = TweenInfo.new(0.000000000001, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
        
        currentTweens.player = TweenService:Create(localRoot, tweenInfo, {CFrame = teleportCFrame})
        currentTweens.player:Play()
    end
end

-- Управление подключениями для авто-телепортации
function ManagePlayerTeleport()
    for _, conn in pairs(teleportConnections) do
        conn:Disconnect()
    end
    teleportConnections = {}

    if playerAutoTeleport and targetPlayer then
        table.insert(teleportConnections, RunService.Heartbeat:Connect(function()
            pcall(SmoothTeleportToPlayer)
        end))
    end
end

-- Управление автофиксом
function ManageAutoFix()
    if autoFixConnection then
        autoFixConnection:Disconnect()
        autoFixConnection = nil
    end
    
    if autoFixEnabled then
        autoFixConnection = RunService.Heartbeat:Connect(function()
            if hasPuzzleUI() then
                pcall(fixfullgen)
            end
        end)
    end
end

-- GUI элементы
local PlayerDropdown = Tab:AddDropdown({
    Name = "Выберите игрока",
    Default = "Не выбран",
    Options = {"Не выбран"},
    Callback = function(selectedPlayerName)
        targetPlayer = Players:FindFirstChild(selectedPlayerName)
        if playerAutoTeleport then
            ManagePlayerTeleport()
        end
    end    
})

Tab:AddButton({
    Name = "Телепорт к платформе",
    Callback = function()
        UpdateTeleportPartPosition()
        TeleportToPlatform()
    end    
})

Tab:AddToggle({
    Name = "Авто-телепорт к игроку",
    Default = false,
    Callback = function(Value)
        playerAutoTeleport = Value
        ManagePlayerTeleport()
    end    
})

-- Заменяем Slider на TextBox
Tab:AddTextbox({
    Name = "Скорость (BaseSpeed)",
    Default = "16",
    TextDisappear = false,
    Callback = function(Value)
        local num = tonumber(Value)
        if num and num >= 0 and num <= 200 then
            currentSpeed = num
            if speedEnabled then
                SetPlayerSpeed()
            end
        else
            OrionLib:MakeNotification({
                Name = "Ошибка",
                Content = "Введите число от 0 до 200",
                Time = 3
            })
        end
    end
})

Tab:AddToggle({
    Name = "Изменить скорость",
    Default = false,
    Callback = function(Value)
        speedEnabled = Value
        SetPlayerSpeed()
        
        if Value then
            LocalPlayer.CharacterAdded:Connect(function(character)
                character:WaitForChild("Humanoid")
                SetPlayerSpeed()
            end)
        end
    end    
})

-- Добавляем новый Toggle для автофикса
Tab:AddToggle({
    Name = "Авто-фикс генератора (при PuzzleUI)",
    Default = false,
    Callback = function(Value)
        autoFixEnabled = Value
        ManageAutoFix()
    end    
})

-- Функции для работы с игроками
function GetPlayerNames()
    local playerNames = {"Не выбран"}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerNames, player.Name)
        end
    end
    return playerNames
end

function UpdatePlayerDropdown()
    PlayerDropdown:Refresh(GetPlayerNames(), true)
end

-- Обработчики событий
LocalPlayer.CharacterAdded:Connect(function(character)
    character:WaitForChild("HumanoidRootPart")
    UpdateTeleportPartPosition()
    if speedEnabled then
        character:WaitForChild("Humanoid")
        SetPlayerSpeed()
    end
end)

Players.PlayerAdded:Connect(UpdatePlayerDropdown)
Players.PlayerRemoving:Connect(UpdatePlayerDropdown)

-- Инициализация
UpdatePlayerDropdown()
if LocalPlayer.Character then
    UpdateTeleportPartPosition()
end
OrionLib:Init()